name: Continuousintegration
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
      - develop

jobs:
  CodeQLanalysis:
    runs-on: 'ubuntu-latest'
    name: CodeQualityanalysis
    
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

    #  - name: Build artifacts
     #   run: npm run build
     # - name: Test and coverage
     #   run: npm run test
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
          upload: False
          output: sarif-results

  Sonarcloud:
     needs: CodeQLanalysis
     runs-on: ubuntu-latest
     
     steps:
       - uses: actions/checkout@v4
         with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
           fetch-depth: 0
       - name: Analyze with SonarCloud

         uses: SonarSource/sonarcloud-github-action@master
         with:
           projectBaseDir: src
           args: >
            -Dsonar.organization=mtnorg
            -Dsonar.projectKey=mtnorg_kente-test
            -Dsonar.qualitygate.wait=true
            
           
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
  
 # Codelinting:
 #    needs: [CodeQLanalysis,Sonarcloud]
 #    runs-on: 'ubuntu-latest'     
 #    steps:
 #     - name: Checkout repository
 #       uses: actions/checkout@v3
 #     - name: Super-linter
 #       uses: super-linter/super-linter@v5.7.2  # x-release-please-version
 #       env:
          #DEFAULT_BRANCH: develop
         # FILTER_REGEX_INCLUDE: .*src/.*
  #        TYPESCRIPT_ES_CONFIG_FILE: .eslintrc.yml
          # To report GitHub Actions status checks
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          

  Buildartifacts:
     needs: [CodeQLanalysis,Sonarcloud]
     runs-on: 'ubuntu-latest'     
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Build artifacts
        run: npm run build

  CodeandTestcoverage:
     needs: Buildartifacts
     runs-on: 'ubuntu-latest'     
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Build artifacts
        run: npm run build

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
         path: build/
      - name: Display structure of downloaded files
        run: ls -R build/
      - name: Coverage
        run: npm run test --coverage
      - name: Unittesting
        run: npm run test
#      - name: Run my coverage
#        uses: kcjpop/coverage-comments@v2.2
#        with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#         coverage-file: './coverage/clover.xml'  
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          disable_default_path_fixes: true
       
#  Build_Docker_Image:
#     needs: CodeandTestcoverage
#     runs-on: 'ubuntu-latest'     
#     steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#     - name: Log in to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}
#     - name: Build an image from Dockerfile
#       run: |
#         docker build -t docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }} .
#     - name: Extract metadata (tags, labels) for Docker
#       id: meta
#       uses: docker/metadata-action@v5
#       with:
#         images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }} 
#     - name: Build and push Docker image
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         push: true
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}

 # Buildazure:
  #   needs: Build_Docker_Image
   #  runs-on: 'ubuntu-latest'  
    # steps:
    #  - name: 'Deploy to Azure Web App'
    #    uses: azure/webapps-deploy@v2
    #    with:
    #      app-name: 'reactapptesting1'
    #      publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_DB4D53E2B92A45BC8149B0AA82ED535C }}
    #      package: .




